// RUN: pattern-gen %s -O 3 --no-extend --mattr=+m | FileCheck --check-prefixes=CHECK,CHECK-EXTEND %s
// RUN: pattern-gen %s -O 3 --no-extend --mattr=+m --no-extend | FileCheck --check-prefixes=CHECK,CHECK-NOEXTEND %s

InstructionSet XCoreVSIMD extends RISCVBase {
instructions {
    // CHECK-EXTEND: Pattern for CV_SUBINCACC: (add (sub (add GPR:$rs1, (i32 1)), GPR:$rs2), GPR:$rd)
    // CHECK-NOEXTEND: Pattern for CV_SUBINCACC: (add (sub (add GPR:$rs1, (i32 1)), GPR:$rs2), GPR:$rd)
    CV_SUBINCACC {
      encoding: 7'b0101000 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
      assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
      behavior: {
        if (rd != 0) {
          X[rd] += X[rs1] - X[rs2] + 1;
        }
      }
    }
    // CHECK-NEXT: Pattern for CV_MAXU: (select (i32 (setcc (i32 GPR:$rs1), (i32 GPR:$rs2), SETUGT)), GPR:$rs1, GPR:$rs2)
    CV_MAXU {
      encoding: 7'b0101110 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
      assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
      behavior: {
        if (rd != 0) {
          X[rd] = X[rs1] > X[rs2] ? X[rs1] : X[rs2];
        }
      }
    }
    // CHECK-NEXT: Pattern for NAND: (xor (and GPR:$rs2, GPR:$rs1), (i32 -1))
    NAND {
      encoding: 7'b0101110 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b1101011;
      assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
      behavior: {
        if (rd != 0) {
          X[rd] = ~(X[rs1] & X[rs2]);
        }
      }
    }
  }
}
